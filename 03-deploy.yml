---
- name: Deploy Java Web Application
  hosts: n4
  become: yes
  vars:
    tomcat_service_name: "tomcat"  # Adjust based on the actual service name
    war_file_path_file: "/tmp/war_file_path.txt"

  tasks:
    - name: Ensure /tmp directory exists
      ansible.builtin.file:
        path: "/tmp"
        state: directory

    - name: Fetch WAR file path from deployment server
      ansible.builtin.slurp:
        src: "{{ war_file_path_file }}"
      register: war_file_path_content

    - name: Decode WAR file path
      ansible.builtin.set_fact:
        war_file_path: "{{ war_file_path_content.content | b64decode }}"

    - name: Fetch WAR file from build server
      ansible.builtin.fetch:
        src: "{{ war_file_path }}"
        dest: "/tmp/WebAppCal-0.0.7.war"
        flat: yes
      delegate_to: n1

    - name: Ensure Tomcat is stopped
      ansible.builtin.systemd:
        name: "{{ tomcat_service_name }}"
        state: stopped

    - name: Deploy WAR file to Tomcat
      ansible.builtin.copy:
        src: "/tmp/WebAppCal-0.0.7.war"
        dest: "/opt/tomcat/webapps/"  # Adjust the path based on your Tomcat installation

    - name: Ensure Tomcat is started
      ansible.builtin.systemd:
        name: "{{ tomcat_service_name }}"
        state: started

    - name: Confirm Tomcat is started
      ansible.builtin.systemd:
        name: "{{ tomcat_service_name }}"
        state: started
      register: tomcat_status

    - name: Fail if Tomcat is not running
      ansible.builtin.fail:
        msg: "Tomcat service is not running."
      when: tomcat_status.status != "started"
