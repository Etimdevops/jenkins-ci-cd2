---
- name: Deploy Java Web Application
  hosts: deploy
  become: yes
  vars:
    tomcat_webapps_dir: "/opt/tomcat/webapps"
    war_file_path_file: "/tmp/war_file_path.txt"
    app_name: "WebAppCal"  # Adjust based on your application name

  tasks:
    - name: Read WAR file path from file
      ansible.builtin.slurp:
        src: "{{ war_file_path_file }}"
      register: war_file_path_slurp

    - name: Set WAR file path as variable
      ansible.builtin.set_fact:
        war_file: "{{ war_file_path_slurp.content | b64decode | trim }}"

    - name: Ensure Tomcat webapps directory exists
      ansible.builtin.file:
        path: "{{ tomcat_webapps_dir }}"
        state: directory

    - name: Stop Tomcat service (Debian/Ubuntu-based)
      ansible.builtin.systemd:
        name: tomcat
        state: stopped
      when: ansible_os_family in ["Debian", "Ubuntu"]

    - name: Stop Tomcat service (Red Hat-based)
      ansible.builtin.systemd:
        name: tomcat
        state: stopped
      when: ansible_os_family == "RedHat"

    - name: Deploy the WAR file to Tomcat
      ansible.builtin.copy:
        src: "{{ war_file }}"
        dest: "{{ tomcat_webapps_dir }}/{{ app_name }}.war"
        mode: '0644'

    - name: Start Tomcat service (Debian/Ubuntu-based)
      ansible.builtin.systemd:
        name: tomcat
        state: started
      when: ansible_os_family in ["Debian", "Ubuntu"]

    - name: Start Tomcat service (Red Hat-based)
      ansible.builtin.systemd:
        name: tomcat
        state: started
      when: ansible_os_family == "RedHat"

    - name: Verify that the application is deployed
      ansible.builtin.uri:
        url: "http://localhost:8080/{{ app_name }}"
        status_code: 200
        timeout: 30
        retries: 5
        delay: 10
      register: deployment_check

    - name: Show deployment result
      ansible.builtin.debug:
        msg: |
          Deployment verification result:
          Status code: {{ deployment_check.status }}
          Response: {{ deployment_check.content }}

=======================

---
- name: Perform Maven build
  hosts: n1
  become: yes
  vars:
    jenkins_workspace: "/home/ec2-user/workspace/JenkinsAnsible"
    java_home: "/usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre"
    m2_home: "/opt/apache-maven-3.8.8"
  tasks:
    - name: Ensure Jenkins workspace directory exists
      ansible.builtin.file:
        path: "{{ jenkins_workspace }}"
        state: directory

    - name: Run Maven build
      ansible.builtin.shell:
        cmd: mvn clean package
        chdir: "{{ jenkins_workspace }}"
      environment:
        JAVA_HOME: "{{ java_home }}"
        M2_HOME: "{{ m2_home }}"
        PATH: "{{ java_home }}/bin:{{ m2_home }}/bin:{{ ansible_env.PATH }}"
      register: build_result

    - name: Show Maven build result
      ansible.builtin.debug:
        msg: |
          Maven Build Result:
          {{ build_result.stdout }}
          Error Output:
          {{ build_result.stderr }}


  ---
- name: Perform Maven test
  hosts: n1
  become: yes
  vars:
    jenkins_workspace: "/home/ec2-user/workspace/JenkinsAnsible"
    java_home: "/usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre"
    m2_home: "/opt/apache-maven-3.8.8"
  tasks:
    - name: Run Maven tests
      ansible.builtin.shell:
        cmd: mvn test
        chdir: "{{ jenkins_workspace }}"
      environment:
        JAVA_HOME: "{{ java_home }}"
        M2_HOME: "{{ m2_home }}"
        PATH: "{{ java_home }}/bin:{{ m2_home }}/bin:{{ ansible_env.PATH }}"
      register: test_result

    - name: Show Maven test result
      ansible.builtin.debug:
        msg: |
          Maven Test Result:
          {{ test_result.stdout }}
          Error Output:
          {{ test_result.stderr }}

- name: Deploy Java Web Application
  hosts: deploy
  become: yes
  vars:
    tomcat_webapps_dir: "/opt/tomcat/webapps"
    war_file_path_file: "/tmp/war_file_path.txt"
    app_name: "WebAppCal"

  tasks:
    - name: Verify that the WAR file path exists
      ansible.builtin.stat:
        path: "{{ war_file_path_file }}"
      register: war_file_stat

    - name: Fail if WAR file path file does not exist
      ansible.builtin.fail:
        msg: "WAR file path file not found: {{ war_file_path_file }}"
      when: not war_file_stat.stat.exists

    - name: Read WAR file path from file
      ansible.builtin.slurp:
        src: "{{ war_file_path_file }}"
      register: war_file_path_slurp
      when: war_file_stat.stat.exists

    - name: Set WAR file path as variable
      ansible.builtin.set_fact:
        war_file: "{{ war_file_path_slurp.content | b64decode | trim }}"
      when: war_file_stat.stat.exists

    # The rest of your deployment tasks



pipeline {
    agent { label 'ansible' }  // Use the 'ansible' agent
    stages {
        stage('Checkout') {
            steps {
                dir('/home/ec2-user/jenkins-ci-cd2') {
                    git url: 'https://github.com/Etimdevops/jenkins-ci-cd2.git', branch: 'master'
                }
            }
        }
        stage('Build') {
            steps {
                dir('/home/ec2-user/jenkins-ci-cd2') {
                    ansiblePlaybook credentialsId: 'JenkinsAns', disableHostKeyChecking: true, installation: 'Ansible', inventory: 'hosts.ini', playbook: '01-build.yml'
                }
            }
        }
        stage('Test') {
            steps {
                dir('/home/ec2-user/jenkins-ci-cd2') {
                    ansiblePlaybook credentialsId: 'JenkinsAns', disableHostKeyChecking: true, installation: 'Ansible', inventory: 'hosts.ini', playbook: '02-test.yml'
                }
            }
        }
        stage('Deploy') {
            steps {
                dir('/home/ec2-user/jenkins-ci-cd2') {
                    ansiblePlaybook credentialsId: 'JenkinsAns', disableHostKeyChecking: true, installation: 'Ansible', inventory: 'hosts.ini', playbook: '03-deploy.yml'
                }
            }
        }
    }
}






---
- name: Transfer WAR file path to deployment servers
  hosts: n1
  become: yes
  vars:
    war_file_path_file: "/tmp/war_file_path.txt"
    transfer_file_path: "/tmp/war_file_path.txt"
  
  tasks:
    - name: Ensure /tmp directory exists on build server
      ansible.builtin.file:
        path: "/tmp"
        state: directory

    - name: Check if WAR file path file exists on build server
      ansible.builtin.stat:
        path: "{{ war_file_path_file }}"
      register: war_file_path_stat

    - name: Fail if WAR file path file does not exist
      ansible.builtin.fail:
        msg: "WAR file path file not found: {{ war_file_path_file }}"
      when: not war_file_path_stat.stat.exists

    - name: Fetch WAR file path from build server
      ansible.builtin.fetch:
        src: "{{ war_file_path_file }}"
        dest: "{{ transfer_file_path }}"
        flat: yes

    - name: Ensure /tmp directory exists on deployment servers
      ansible.builtin.file:
        path: "/tmp"
        state: directory
      delegate_to: "{{ item }}"
      with_items:
        - n3
        - n4
        - n5

    - name: Transfer WAR file path to deployment servers
      ansible.builtin.copy:
        src: "{{ transfer_file_path }}"
        dest: "/tmp/war_file_path.txt"
      delegate_to: "{{ item }}"
      with_items:
        - n3
        - n4
        - n5

